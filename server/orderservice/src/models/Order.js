const mongoose = require('mongoose');

// Simplified Order Item Schema
const orderItemSchema = new mongoose.Schema({
  id: {
    type: String,
    required: true
  },
  title: {
    type: String,
    required: true
  },
  quantity: {
    type: Number,
    required: true,
    min: 1
  },
  price: {
    type: Number,
    required: true,
    min: 0
  }
});

// Simplified Order Schema  
const orderSchema = new mongoose.Schema({
  orderId: {
    type: String,
    unique: true,
    index: true
    // Not required here as it will be generated by pre-save middleware
  },
  userId: {
    type: String,
    required: true
  },
  items: [orderItemSchema],
  totalAmount: {
    type: Number,
    required: true,
    min: 0
  },
  status: {
    type: String,
    enum: ['PENDING', 'CONFIRMED', 'CANCELLED'],
    default: 'PENDING'
  },
  customerEmail: {
    type: String,
    required: true
  },
  customerName: {
    type: String,
    required: true
  }
}, {
  timestamps: true
});

// Pre-save middleware to generate orderId
orderSchema.pre('save', function(next) {
  if (!this.orderId) {
    this.orderId = `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
  }
  
  // Calculate total if not set
  if (!this.totalAmount) {
    this.totalAmount = this.items.reduce((total, item) => total + (item.quantity * item.price), 0);
  }
  
  next();
});

// Instance methods following SOLID principles (simplified)
orderSchema.methods.calculateTotal = function() {
  return this.items.reduce((total, item) => total + (item.price * item.quantity), 0);
};

orderSchema.methods.validateOrder = function() {
  const errors = [];
  
  if (!this.items || this.items.length === 0) {
    errors.push('Order must contain at least one item');
  }
  
  // Basic validation for simplified model
  this.items.forEach((item, index) => {
    if (!item.id || !item.title || !item.price || !item.quantity) {
      errors.push(`Item ${index + 1} is missing required fields`);
    }
    if (item.price < 0) {
      errors.push(`Item ${index + 1} has invalid price`);
    }
    if (item.quantity < 1) {
      errors.push(`Item ${index + 1} has invalid quantity`);
    }
  });
  
  return errors;
};

orderSchema.methods.toEventData = function() {
  return {
    orderId: this.orderId,
    userId: this.userId,
    customerEmail: this.customerEmail,
    customerName: this.customerName,
    totalAmount: this.totalAmount,
    status: this.status,
    items: this.items.map(item => ({
      id: item.id,
      title: item.title,
      quantity: item.quantity,
      price: item.price
    })),
    createdAt: this.createdAt
  };
};

// Create indexes (orderId already has index: true above)
orderSchema.index({ userId: 1 });
orderSchema.index({ status: 1 });

const Order = mongoose.model('Order', orderSchema);

module.exports = Order;